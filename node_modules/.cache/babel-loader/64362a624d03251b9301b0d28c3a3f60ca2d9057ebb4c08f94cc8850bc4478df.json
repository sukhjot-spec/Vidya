{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sukhjot\\\\OneDrive\\\\Desktop\\\\hack5\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing session on app load\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          // Validate token with backend\n          const response = await api.getCurrentUser();\n          if (response.success) {\n            setUser(response.data);\n          } else {\n            // Token is invalid, clear storage\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('user');\n          }\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      console.log('AuthContext: Starting login for:', email);\n      setLoading(true);\n      const response = await api.login({\n        email,\n        password\n      });\n      console.log('AuthContext: API response:', response);\n      if (response.success) {\n        console.log('AuthContext: Login successful, setting user state');\n        setUser(response.data.user);\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        console.log('AuthContext: User state set, token stored');\n        return {\n          success: true\n        };\n      } else {\n        console.log('AuthContext: Login failed:', response.message);\n        return {\n          success: false,\n          error: response.message || 'Invalid credentials'\n        };\n      }\n    } catch (error) {\n      console.error('AuthContext: Login error:', error);\n      return {\n        success: false,\n        error: error.message || 'Login failed. Please try again.'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async userData => {\n    try {\n      console.log('AuthContext: Starting signup for:', userData.email);\n      setLoading(true);\n      const response = await api.register(userData);\n      console.log('AuthContext: Signup API response:', response);\n      if (response.success) {\n        console.log('AuthContext: Signup successful, setting user state');\n        setUser(response.data.user);\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        console.log('AuthContext: User state set after signup');\n        return {\n          success: true\n        };\n      } else {\n        console.log('AuthContext: Signup failed:', response.message);\n        return {\n          success: false,\n          error: response.message || 'Signup failed'\n        };\n      }\n    } catch (error) {\n      console.error('AuthContext: Signup error:', error);\n      return {\n        success: false,\n        error: error.message || 'Signup failed. Please try again.'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await api.logout();\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Even if logout API fails, clear local state\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      return {\n        success: true\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateUser = async updatedData => {\n    try {\n      const response = await api.updateProfile(updatedData);\n      if (response.success) {\n        setUser(response.data);\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: response.message\n        };\n      }\n    } catch (error) {\n      console.error('Update user error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to update profile'\n      };\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    signup,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","response","getCurrentUser","success","data","removeItem","error","console","login","email","password","log","setItem","JSON","stringify","message","signup","userData","register","logout","updateUser","updatedData","updateProfile","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Sukhjot/OneDrive/Desktop/hack5/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api } from '../utils/api';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session on app load\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          // Validate token with backend\n          const response = await api.getCurrentUser();\n          if (response.success) {\n            setUser(response.data);\n          } else {\n            // Token is invalid, clear storage\n            localStorage.removeItem('authToken');\n            localStorage.removeItem('user');\n          }\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      console.log('AuthContext: Starting login for:', email);\n      setLoading(true);\n      const response = await api.login({ email, password });\n      console.log('AuthContext: API response:', response);\n      \n      if (response.success) {\n        console.log('AuthContext: Login successful, setting user state');\n        setUser(response.data.user);\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        console.log('AuthContext: User state set, token stored');\n        return { success: true };\n      } else {\n        console.log('AuthContext: Login failed:', response.message);\n        return { success: false, error: response.message || 'Invalid credentials' };\n      }\n    } catch (error) {\n      console.error('AuthContext: Login error:', error);\n      return { \n        success: false, \n        error: error.message || 'Login failed. Please try again.' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signup = async (userData) => {\n    try {\n      console.log('AuthContext: Starting signup for:', userData.email);\n      setLoading(true);\n      const response = await api.register(userData);\n      console.log('AuthContext: Signup API response:', response);\n      \n      if (response.success) {\n        console.log('AuthContext: Signup successful, setting user state');\n        setUser(response.data.user);\n        localStorage.setItem('authToken', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        console.log('AuthContext: User state set after signup');\n        return { success: true };\n      } else {\n        console.log('AuthContext: Signup failed:', response.message);\n        return { success: false, error: response.message || 'Signup failed' };\n      }\n    } catch (error) {\n      console.error('AuthContext: Signup error:', error);\n      return { \n        success: false, \n        error: error.message || 'Signup failed. Please try again.' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await api.logout();\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      return { success: true };\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Even if logout API fails, clear local state\n      setUser(null);\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      return { success: true };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateUser = async (updatedData) => {\n    try {\n      const response = await api.updateProfile(updatedData);\n      if (response.success) {\n        setUser(response.data);\n        localStorage.setItem('user', JSON.stringify(response.data));\n        return { success: true };\n      } else {\n        return { success: false, error: response.message };\n      }\n    } catch (error) {\n      console.error('Update user error:', error);\n      return { \n        success: false, \n        error: error.message || 'Failed to update profile' \n      };\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    signup,\n    logout,\n    updateUser\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}